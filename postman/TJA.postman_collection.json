{
	"info": {
		"_postman_id": "518881de-55d9-4c61-abd2-345a7cda6eff",
		"name": "Trade Journal Authentication Test Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9011736"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Success SignIn As Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token-admin\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token-admin\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal('admin');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{admin-email}}\",\r\n  \"password\": \"{{admin-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SignUp as New User",
			"item": [
				{
					"name": "Success SignUp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"company-name\", getCompanyName());\r",
									"pm.collectionVariables.set(\"first-name\", pm.collectionVariables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"last-name\", pm.collectionVariables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"user-name\", gerUserName());\r",
									"pm.collectionVariables.set(\"user-email\", gerUserEmail());\r",
									"\r",
									"function getCompanyName() {\r",
									"     const companyName = pm.collectionVariables.replaceIn(\"{{$randomLastName}}\");\r",
									"\t const companyName2 = pm.collectionVariables.replaceIn(\"{{$randomLastName}}\");\r",
									"     return (companyName + companyName2).toUpperCase();\r",
									"}\r",
									"\r",
									"function gerUserName() {\r",
									"    const firstName = pm.collectionVariables.get(\"first-name\");\r",
									"    const lastName = pm.collectionVariables.get(\"last-name\");\r",
									"    return (firstName + lastName).toLowerCase();\r",
									"}\r",
									"\r",
									"function gerUserEmail() {\r",
									"    const userName = gerUserName();\r",
									"    return userName + '@mail.com';\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.enabled).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyName\": \"{{company-name}}\",\r\n    \"firstName\": \"{{first-name}}\",\r\n    \"lastName\": \"{{last-name}}\",\r\n    \"userName\": \"{{user-name}}\",\r\n    \"email\": \"{{user-email}}\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signup",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Verification Again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.enabled).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/verify/send?email={{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"verify",
								"send"
							],
							"query": [
								{
									"key": "email",
									"value": "{{user-email}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"REGISTRATION\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"user-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/verify?hash={{user-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"verify"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{user-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Refresh Token",
			"item": [
				{
					"name": "Refresh Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "refresh-token",
								"value": "{{refresh-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/authentication/refresh-token",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"refresh-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Password Change",
			"item": [
				{
					"name": "Request Password Change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/change-password/request?email={{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"change-password",
								"request"
							],
							"query": [
								{
									"key": "email",
									"value": "{{user-email}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed singin up user locked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Test responses\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.error).to.equal(\"Locked Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Change password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"CHANGE_PASSWORD\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"user-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"{{user-email}}\",\r\n\t\"hash\": \"{{user-verification-hash}}\",\r\n\t\"password\": \"{{user-password}}\",\r\n\t\"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/change-password",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Me Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.id).not.equal(null);\r",
									"\tpm.expect(response.userName).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"\tpm.expect(response.firstName).to.equal(pm.collectionVariables.get(\"first-name\"));\r",
									"\tpm.expect(response.lastName).to.equal(pm.collectionVariables.get(\"last-name\"));\r",
									"\tpm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\tpm.expect(response.enabled).to.equal(true);\r",
									"\tpm.expect(response.verified).to.equal(true);\r",
									"\tpm.expect(response.authorities).to.contains(\"ROLE_USER\", \"TENANCY_ADMIN\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/me",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Manage User as Tenancy Admin",
			"item": [
				{
					"name": "Get Tenancy by User email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.id).not.equal(null);\r",
									"\tpm.expect(response.name).not.equal(null);\r",
									"\tpm.expect(response.userLimit).to.equal(1);\r",
									"\tpm.expect(response.userUsage).to.equal(1);\r",
									"\tpm.expect(response.enabled).to.equal(true);\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-id\", response.id);\r",
									"\tpm.collectionVariables.set(\"tenancy-name\", response.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/by-email/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"by-email",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set new tenancy Limits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.id).not.equal(null);\r",
									"\tpm.expect(response.name).not.equal(null);\r",
									"\tpm.expect(response.userLimit).to.equal(3);\r",
									"\tpm.expect(response.userUsage).to.equal(1);\r",
									"\tpm.expect(response.enabled).to.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}/limit/3",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}",
								"limit",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get tenancy users must be 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.totalItems).to.equal(1);\r",
									"\t\r",
									"\tvar user = response.items[0];\r",
									"\r",
									"\tpm.expect(user.userName).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create First user for Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.userName).to.eql(\"user1\");\r",
									"\tpm.expect(response.firstName).to.eql(\"user1\");\r",
									"\tpm.expect(response.email).to.eql(\"user1@mail.com\");\r",
									"\tpm.expect(response.lastName).to.eql(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user-1-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"user1\",\r\n    \"lastName\": \"{{tenancy-name}}\",\r\n    \"userName\": \"user1\",\r\n    \"email\": \"user1@mail.com\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/organisation/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Second user for Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.userName).to.eql(\"user2\");\r",
									"\tpm.expect(response.firstName).to.eql(\"user2\");\r",
									"\tpm.expect(response.email).to.eql(\"user2@mail.com\");\r",
									"\tpm.expect(response.lastName).to.eql(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user-2-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"user2\",\r\n    \"lastName\": \"{{tenancy-name}}\",\r\n    \"userName\": \"user2\",\r\n    \"email\": \"user2@mail.com\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/organisation/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get tenancy users must be 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.totalItems).to.equal(3);\r",
									"\r",
									"\tvar user1 = response.items[1];\r",
									"\tpm.expect(user1.id).to.eql(pm.collectionVariables.get(\"tenancy-user-1-id\"));\r",
									"\tpm.expect(user1.enabled).to.eql(false);\r",
									"\tpm.expect(user1.verified).to.eql(false);\r",
									"\r",
									"\tvar user2 = response.items[2];\r",
									"\tpm.expect(user2.id).to.eql(pm.collectionVariables.get(\"tenancy-user-2-id\"));\r",
									"\tpm.expect(user2.enabled).to.eql(false);\r",
									"\tpm.expect(user2.verified).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Second tenancy user By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.id).to.eql(pm.collectionVariables.get(\"tenancy-user-2-id\"));\r",
									"\tpm.expect(response.userName).to.eql( \"user2\");\r",
									"\tpm.expect(response.firstName).to.eql( \"user2\");\r",
									"\tpm.expect(response.lastName).to.eql(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\tpm.expect(response.email).to.eql(\"user2@mail.com\");\r",
									"\tpm.expect(response.authorities.length).to.eql(1);\r",
									"\tpm.expect(response.authorities).to.contains(\"ROLE_USER\");\r",
									"\tpm.expect(response.enabled).to.eql(false);\r",
									"\tpm.expect(response.verified).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-2-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-2-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get tenancy users filter by user name user1 must be 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.totalItems).to.equal(1);\r",
									"\r",
									"\tvar user1 = response.items[0];\r",
									"\tpm.expect(user1.id).to.eql(pm.collectionVariables.get(\"tenancy-user-1-id\"));\r",
									"\tpm.expect(user1.enabled).to.eql(false);\r",
									"\tpm.expect(user1.verified).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users?filter=user1",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "user1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn user1 fail because it is blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.error).to.eql(\"Locked Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user1@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn user2 fail because it is blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.error).to.eql(\"Locked Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user2@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Registration User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(\"user1@mail.com\");\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"NEW_ORGANISATION_USER\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user1-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/user1@mail.com",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"user1@mail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Tenancy User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/verify?hash={{tenancy-user1-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"verify"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{tenancy-user1-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Registration User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(\"user2@mail.com\");\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"NEW_ORGANISATION_USER\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user2-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/user2@mail.com",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"user2@mail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Tenancy User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/verify?hash={{tenancy-user2-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"verify"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{tenancy-user2-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn user1 fail because it is invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.error).to.eql(\"Bad Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user1@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn user2 fail because it is invalid password Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.error).to.eql(\"Bad Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user2@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Change Password User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(\"user1@mail.com\");\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"CHANGE_PASSWORD\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user1-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/user1@mail.com",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"user1@mail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"user1@mail.com\",\r\n\t\"hash\": \"{{tenancy-user1-verification-hash}}\",\r\n\t\"password\": \"{{user-password}}\",\r\n\t\"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/change-password",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn As User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(\"user1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user1@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Change Password User 2 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(\"user2@mail.com\");\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"CHANGE_PASSWORD\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user2-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/user2@mail.com",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"user2@mail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"user2@mail.com\",\r\n\t\"hash\": \"{{tenancy-user2-verification-hash}}\",\r\n\t\"password\": \"{{user-password}}\",\r\n\t\"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/change-password",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn As User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(\"user2\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user2@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable Tenancy User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-1-id}}/disable",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-1-id}}",
								"disable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed SignIn As User1 because it is blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.error).to.equal(\"Locked Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user1@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable Tenancy User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-1-id}}/enable",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-1-id}}",
								"enable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn As User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(\"user1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user1@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Tenancy Admin Authority for User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.eql(2);\r",
									"\r",
									"\tvar auth1 = response[0];\r",
									"\tpm.expect(auth1.name).to.eql(\"ROLE_USER\");\r",
									"\tpm.expect(auth1.category).to.eql(\"COMMON_USER\");\r",
									"\r",
									"\tvar auth2 = response[1];\r",
									"\tpm.expect(auth2.name).to.eql(\"TENANCY_ADMIN\");\r",
									"\tpm.expect(auth2.category).to.eql(\"ORGANISATION\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"authorities\":[\"TENANCY_ADMIN\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-2-id}}/authorities",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-2-id}}",
								"authorities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User2 To check added Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.id).to.eql(pm.collectionVariables.get(\"tenancy-user-2-id\"));\r",
									"\tpm.expect(response.userName).to.eql( \"user2\");\r",
									"\tpm.expect(response.firstName).to.eql( \"user2\");\r",
									"\tpm.expect(response.lastName).to.eql(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\tpm.expect(response.email).to.eql(\"user2@mail.com\");\r",
									"\tpm.expect(response.authorities.length).to.eql(2);\r",
									"\tpm.expect(response.authorities).to.contains(\"ROLE_USER\", \"TENANCY_ADMIN\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-2-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-2-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User1 To check no added Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.id).to.eql(pm.collectionVariables.get(\"tenancy-user-1-id\"));\r",
									"\tpm.expect(response.userName).to.eql( \"user1\");\r",
									"\tpm.expect(response.firstName).to.eql( \"user1\");\r",
									"\tpm.expect(response.lastName).to.eql(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\tpm.expect(response.email).to.eql(\"user1@mail.com\");\r",
									"\tpm.expect(response.authorities.length).to.eql(1);\r",
									"\tpm.expect(response.authorities).to.contains(\"ROLE_USER\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-1-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-1-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn As User2 To test its added Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(\"user2\");\r",
									"\r",
									"\tpm.collectionVariables.set(\"temp-access-token\", response.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user2@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Tenancy Users User2 must allow access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.totalItems).to.equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{temp-access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Tenancy Admin Authority for User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.eql(1);\r",
									"\r",
									"\tvar auth1 = response[0];\r",
									"\tpm.expect(auth1.name).to.eql(\"ROLE_USER\");\r",
									"\tpm.expect(auth1.category).to.eql(\"COMMON_USER\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"authorities\":[\"TENANCY_ADMIN\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-2-id}}/authorities",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-2-id}}",
								"authorities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User2 To check removed Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.id).to.eql(pm.collectionVariables.get(\"tenancy-user-2-id\"));\r",
									"\tpm.expect(response.userName).to.eql( \"user2\");\r",
									"\tpm.expect(response.firstName).to.eql( \"user2\");\r",
									"\tpm.expect(response.lastName).to.eql(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\tpm.expect(response.email).to.eql(\"user2@mail.com\");\r",
									"\tpm.expect(response.authorities.length).to.eql(1);\r",
									"\tpm.expect(response.authorities).to.contains(\"ROLE_USER\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-2-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-2-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn As User2 To test its Removed Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(\"user2\");\r",
									"\r",
									"\tpm.collectionVariables.set(\"temp-access-token\", response.accessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user2@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Tenancy Users User2 must deny access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.error).to.equal(\"Forbidden\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{temp-access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-1-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-1-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn As User1 fail because user was deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.error).to.equal(\"Bad Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user1@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn As User2 still works",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(\"user2\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user2@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-2-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-2-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn As User2 fail because user was deleted Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.error).to.equal(\"Bad Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user2@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get tenancy users must be 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.totalItems).to.equal(1);\r",
									"\t\r",
									"\tvar user = response.items[0];\r",
									"\r",
									"\tpm.expect(user.userName).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Tenancy Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.id).to.equal(pm.collectionVariables.get(\"tenancy-id\"));\r",
									"\tpm.expect(response.name).to.equal(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\tpm.expect(response.userLimit).to.equal(3);\r",
									"\tpm.expect(response.userUsage).to.equal(1);\r",
									"\tpm.expect(response.enabled).to.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/tenancy",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"tenancy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Authorities as Tenancy Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.id).to.equal(pm.collectionVariables.get(\"tenancy-id\"));\r",
									"\tpm.expect(response.name).to.equal(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\tpm.expect(response.userLimit).to.equal(3);\r",
									"\tpm.expect(response.userUsage).to.equal(1);\r",
									"\tpm.expect(response.enabled).to.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/tenancy",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"tenancy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Me Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.userName).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"\tpm.expect(response.firstName).to.equal(pm.collectionVariables.get(\"first-name\"));\r",
									"\tpm.expect(response.lastName).to.equal(pm.collectionVariables.get(\"last-name\"));\r",
									"\tpm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.authorities.length).to.equal(2);\r",
									"\tpm.expect(response.authorities).to.contains(\"ROLE_USER\",\"TENANCY_ADMIN\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/me",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Me Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/me/delete",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"me",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Change Password User 2 Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"DELETE_ME\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"user-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/me/delete?hash={{user-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"me",
								"delete"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{user-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn As Tenancy Admin fail because user was deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.error).to.equal(\"Bad Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tenancy by User not found anymore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/by-email/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"by-email",
								"{{user-email}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorities",
			"item": [
				{
					"name": "Get All Authorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.length).to.eql(3);\r",
									"\r",
									"\tvar index = indexByName('ROLE_ADMIN', response);\r",
									"\tpm.expect(response[index].name).to.eql(\"ROLE_ADMIN\");\r",
									"\tpm.expect(response[index].category).to.eql(\"ADMINISTRATOR\");\r",
									"\r",
									"\tindex = indexByName('ROLE_USER', response);\r",
									"\tpm.expect(response[index].name).to.eql(\"ROLE_USER\");\r",
									"\tpm.expect(response[index].category).to.eql(\"COMMON_USER\");\r",
									"\tpm.collectionVariables.set(\"authority-id\", response[index].id);\r",
									"\r",
									"\tindex = indexByName('TENANCY_ADMIN', response);\r",
									"\tpm.expect(response[index].name).to.eql(\"TENANCY_ADMIN\");\r",
									"\tpm.expect(response[index].category).to.eql(\"ORGANISATION\");\r",
									"});\r",
									"\r",
									"function indexByName(name, response) {\r",
									"\treturn response.map(\r",
									"            function(filter) {\r",
									"                return filter.name;\r",
									"            }\r",
									"        ).indexOf(name);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/authorities",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Authorites Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.length).to.eql(3);\r",
									"\r",
									"\tpm.expect(response).to.contains(\"COMMON_USER\",\"ORGANISATION\",\"ADMINISTRATOR\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/authorities/categories",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Authorites by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.name).to.eql(\"ROLE_USER\");\r",
									"\tpm.expect(response.category).to.eql(\"COMMON_USER\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/authorities/{{authority-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities",
								"{{authority-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.name).to.eql(\"SAMPLE_USER\");\r",
									"\tpm.expect(response.category).to.eql(\"COMMON_USER\");\r",
									"\r",
									"\tpm.collectionVariables.set(\"authority-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": \"COMMON_USER\",\r\n  \"name\": \"SAMPLE_USER\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/admin/authorities",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Authorites must be 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.length).to.eql(4);\r",
									"\r",
									"\tvar index = indexByName('ROLE_ADMIN', response);\r",
									"\tpm.expect(response[index].name).to.eql(\"ROLE_ADMIN\");\r",
									"\tpm.expect(response[index].category).to.eql(\"ADMINISTRATOR\");\r",
									"\r",
									"\tindex = indexByName('ROLE_USER', response);\r",
									"\tpm.expect(response[index].name).to.eql(\"ROLE_USER\");\r",
									"\tpm.expect(response[index].category).to.eql(\"COMMON_USER\");\r",
									"\r",
									"\tindex = indexByName('TENANCY_ADMIN', response);\r",
									"\tpm.expect(response[index].name).to.eql(\"TENANCY_ADMIN\");\r",
									"\tpm.expect(response[index].category).to.eql(\"ORGANISATION\");\r",
									"\r",
									"\tindex = indexByName('SAMPLE_USER', response);\r",
									"\tpm.expect(response[index].name).to.eql(\"SAMPLE_USER\");\r",
									"\tpm.expect(response[index].category).to.eql(\"COMMON_USER\");\r",
									"});\r",
									"\r",
									"function indexByName(name, response) {\r",
									"\treturn response.map(\r",
									"            function(filter) {\r",
									"                return filter.name;\r",
									"            }\r",
									"        ).indexOf(name);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/authorities",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.name).to.eql(\"SAMPLE_USER-UPDATED\");\r",
									"\tpm.expect(response.category).to.eql(\"COMMON_USER\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": \"COMMON_USER\",\r\n  \"name\": \"SAMPLE_USER-UPDATED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/admin/authorities/{{authority-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities",
								"{{authority-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Authority by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.name).to.eql(\"SAMPLE_USER-UPDATED\");\r",
									"\tpm.expect(response.category).to.eql(\"COMMON_USER\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/authorities/{{authority-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities",
								"{{authority-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/authorities/{{authority-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities",
								"{{authority-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Authorites must be 3 again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.length).to.eql(3);\r",
									"\r",
									"\tvar index = indexByName('ROLE_ADMIN', response);\r",
									"\tpm.expect(response[index].name).to.eql(\"ROLE_ADMIN\");\r",
									"\tpm.expect(response[index].category).to.eql(\"ADMINISTRATOR\");\r",
									"\r",
									"\tindex = indexByName('ROLE_USER', response);\r",
									"\tpm.expect(response[index].name).to.eql(\"ROLE_USER\");\r",
									"\tpm.expect(response[index].category).to.eql(\"COMMON_USER\");\r",
									"\r",
									"\tindex = indexByName('TENANCY_ADMIN', response);\r",
									"\tpm.expect(response[index].name).to.eql(\"TENANCY_ADMIN\");\r",
									"\tpm.expect(response[index].category).to.eql(\"ORGANISATION\");\r",
									"});\r",
									"\r",
									"function indexByName(name, response) {\r",
									"\treturn response.map(\r",
									"            function(filter) {\r",
									"                return filter.name;\r",
									"            }\r",
									"        ).indexOf(name);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/authorities",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tenancies",
			"item": [
				{
					"name": "Success SignUp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"company-name\", getCompanyName());\r",
									"pm.collectionVariables.set(\"first-name\", pm.collectionVariables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"last-name\", pm.collectionVariables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"user-name\", gerUserName());\r",
									"pm.collectionVariables.set(\"user-email\", gerUserEmail());\r",
									"\r",
									"function getCompanyName() {\r",
									"     const companyName = pm.collectionVariables.replaceIn(\"{{$randomLastName}}\");\r",
									"\t const companyName2 = pm.collectionVariables.replaceIn(\"{{$randomLastName}}\");\r",
									"     return (companyName + companyName2).toUpperCase();\r",
									"}\r",
									"\r",
									"function gerUserName() {\r",
									"    const firstName = pm.collectionVariables.get(\"first-name\");\r",
									"    const lastName = pm.collectionVariables.get(\"last-name\");\r",
									"    return (firstName + lastName).toLowerCase();\r",
									"}\r",
									"\r",
									"function gerUserEmail() {\r",
									"    const userName = gerUserName();\r",
									"    return userName + '@mail.com';\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.enabled).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyName\": \"{{company-name}}\",\r\n    \"firstName\": \"{{first-name}}\",\r\n    \"lastName\": \"{{last-name}}\",\r\n    \"userName\": \"{{user-name}}\",\r\n    \"email\": \"{{user-email}}\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signup",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"REGISTRATION\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"user-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/verify?hash={{user-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"verify"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{user-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tenancies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    const tenancy = response.items.filter(tenancy => tenancy.name === pm.collectionVariables.get(\"company-name\"))[0];\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-id\", tenancy.id);\r",
									"\r",
									"\tpm.expect(tenancy.userLimit).to.eql(1);\r",
									"\tpm.expect(tenancy.userUsage).to.eql(1);\r",
									"\tpm.expect(tenancy.enabled).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies?size=100",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies"
							],
							"query": [
								{
									"key": "size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Tenancy by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.userLimit).to.eql(1);\r",
									"\tpm.expect(response.userUsage).to.eql(1);\r",
									"\tpm.expect(response.enabled).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}/disable",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}",
								"disable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Tenancy by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.userLimit).to.eql(1);\r",
									"\tpm.expect(response.userUsage).to.eql(1);\r",
									"\tpm.expect(response.enabled).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail SignIn Tenancy Disabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"  pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.error).to.equal(\"Your tenancy is disabled by the system admin\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable Tenancy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}/enable",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}",
								"enable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Tenancy by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.userLimit).to.eql(1);\r",
									"\tpm.expect(response.userUsage).to.eql(1);\r",
									"\tpm.expect(response.enabled).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Tenancy by User email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.userLimit).to.eql(1);\r",
									"\tpm.expect(response.userUsage).to.eql(1);\r",
									"\tpm.expect(response.enabled).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/by-email/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"by-email",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy not allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"  pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.error).to.eql(\"Delete this tenancy not allowed because there are users using it\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.totalItems).to.eql(1);\r",
									"\tpm.collectionVariables.set(\"user-id\", response.items[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tenancies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    const tenancy = response.items.filter(tenancy => tenancy.name === pm.collectionVariables.get(\"company-name\"))[0];\r",
									"\r",
									"\tpm.expect(tenancy).to.eql(undefined);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Success SignUp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"company-name\", getCompanyName());\r",
									"pm.collectionVariables.set(\"first-name\", pm.collectionVariables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"last-name\", pm.collectionVariables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"user-name\", gerUserName());\r",
									"pm.collectionVariables.set(\"user-email\", gerUserEmail());\r",
									"\r",
									"function getCompanyName() {\r",
									"     const companyName = pm.collectionVariables.replaceIn(\"{{$randomLastName}}\");\r",
									"\t const companyName2 = pm.collectionVariables.replaceIn(\"{{$randomLastName}}\");\r",
									"     return (companyName + companyName2).toUpperCase();\r",
									"}\r",
									"\r",
									"function gerUserName() {\r",
									"    const firstName = pm.collectionVariables.get(\"first-name\");\r",
									"    const lastName = pm.collectionVariables.get(\"last-name\");\r",
									"    return (firstName + lastName).toLowerCase();\r",
									"}\r",
									"\r",
									"function gerUserEmail() {\r",
									"    const userName = gerUserName();\r",
									"    return userName + '@mail.com';\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.enabled).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyName\": \"{{company-name}}\",\r\n    \"firstName\": \"{{first-name}}\",\r\n    \"lastName\": \"{{last-name}}\",\r\n    \"userName\": \"{{user-name}}\",\r\n    \"email\": \"{{user-email}}\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signup",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"REGISTRATION\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"user-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/verify?hash={{user-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"verify"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{user-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tenancies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tconst tenancy = response.items.filter(tenancy => tenancy.name === pm.collectionVariables.get(\"company-name\"))[0];\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-id\", tenancy.id);\r",
									"\r",
									"\tpm.expect(tenancy.userLimit).to.eql(1);\r",
									"\tpm.expect(tenancy.userUsage).to.eql(1);\r",
									"\tpm.expect(tenancy.enabled).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies?size=100",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies"
							],
							"query": [
								{
									"key": "size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.totalItems).to.eql(1);\r",
									"\tpm.collectionVariables.set(\"user-id\", response.items[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}/disable",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}",
								"disable"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail SignIn User Disabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.error).to.equal(\"Locked Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}/enable",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}",
								"enable"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.name).to.eql(\"NEW-ROLE\");\r",
									"\tpm.expect(response.category).to.eql(\"COMMON_USER\");\r",
									"\r",
									"\tpm.collectionVariables.set(\"authority-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": \"COMMON_USER\",\r\n  \"name\": \"NEW-ROLE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/admin/authorities",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new authority to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.eql(3);\r",
									"\r",
									"\tvar auth1 = response[0];\r",
									"\tpm.expect(auth1.name).to.eql(\"ROLE_USER\");\r",
									"\tpm.expect(auth1.category).to.eql(\"COMMON_USER\");\r",
									"\r",
									"\tvar auth2 = response[1];\r",
									"\tpm.expect(auth2.name).to.eql(\"TENANCY_ADMIN\");\r",
									"\tpm.expect(auth2.category).to.eql(\"ORGANISATION\");\r",
									"\r",
									"\tvar auth3 = response[2];\r",
									"\tpm.expect(auth3.name).to.eql(\"NEW-ROLE\");\r",
									"\tpm.expect(auth3.category).to.eql(\"COMMON_USER\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"authorities\":[\"NEW-ROLE\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}/authorities",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}",
								"authorities"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\t\r",
									"\tpm.expect(response.authorities).to.contains(\"ROLE_USER\",\"TENANCY_ADMIN\",\"NEW-ROLE\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete authority from user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.length).to.eql(2);\r",
									"\r",
									"\tvar auth1 = response[0];\r",
									"\tpm.expect(auth1.name).to.eql(\"ROLE_USER\");\r",
									"\tpm.expect(auth1.category).to.eql(\"COMMON_USER\");\r",
									"\r",
									"\tvar auth2 = response[1];\r",
									"\tpm.expect(auth2.name).to.eql(\"TENANCY_ADMIN\");\r",
									"\tpm.expect(auth2.category).to.eql(\"ORGANISATION\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"authorities\":[\"NEW-ROLE\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}/authorities",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}",
								"authorities"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\t\r",
									"\tpm.expect(response.authorities).to.contains(\"ROLE_USER\",\"TENANCY_ADMIN\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/authorities/{{authority-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"authorities",
								"{{authority-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verifications",
			"item": [
				{
					"name": "Success SignUp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"company-name\", getCompanyName());\r",
									"pm.collectionVariables.set(\"first-name\", pm.collectionVariables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"last-name\", pm.collectionVariables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"user-name\", gerUserName());\r",
									"pm.collectionVariables.set(\"user-email\", gerUserEmail());\r",
									"\r",
									"function getCompanyName() {\r",
									"     const companyName = pm.collectionVariables.replaceIn(\"{{$randomLastName}}\");\r",
									"\t const companyName2 = pm.collectionVariables.replaceIn(\"{{$randomLastName}}\");\r",
									"     return (companyName + companyName2).toUpperCase();\r",
									"}\r",
									"\r",
									"function gerUserName() {\r",
									"    const firstName = pm.collectionVariables.get(\"first-name\");\r",
									"    const lastName = pm.collectionVariables.get(\"last-name\");\r",
									"    return (firstName + lastName).toLowerCase();\r",
									"}\r",
									"\r",
									"function gerUserEmail() {\r",
									"    const userName = gerUserName();\r",
									"    return userName + '@mail.com';\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.enabled).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyName\": \"{{company-name}}\",\r\n    \"firstName\": \"{{first-name}}\",\r\n    \"lastName\": \"{{last-name}}\",\r\n    \"userName\": \"{{user-name}}\",\r\n    \"email\": \"{{user-email}}\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signup",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"REGISTRATION\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"user-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new verification for user Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"\tconst response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"REGISTRATION\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"user-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"{{user-email}}\",\r\n\t\"verificationType\": \"REGISTRATION\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/admin/verifications",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/verify?hash={{user-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"verify"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{user-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tenancies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    const tenancy = response.items.filter(tenancy => tenancy.name === pm.collectionVariables.get(\"company-name\"))[0];\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-id\", tenancy.id);\r",
									"\r",
									"\tpm.expect(tenancy.userLimit).to.eql(1);\r",
									"\tpm.expect(tenancy.userUsage).to.eql(1);\r",
									"\tpm.expect(tenancy.enabled).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies?size=100",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies"
							],
							"query": [
								{
									"key": "size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.totalItems).to.eql(1);\r",
									"\tpm.collectionVariables.set(\"user-id\", response.items[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Me Update",
			"item": [
				{
					"name": "Success SignUp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"company-name\", getCompanyName());\r",
									"pm.collectionVariables.set(\"first-name\", pm.collectionVariables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"last-name\", pm.collectionVariables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"user-name\", gerUserName());\r",
									"pm.collectionVariables.set(\"user-email\", gerUserEmail());\r",
									"\r",
									"function getCompanyName() {\r",
									"     const companyName = pm.collectionVariables.replaceIn(\"{{$randomLastName}}\");\r",
									"\t const companyName2 = pm.collectionVariables.replaceIn(\"{{$randomLastName}}\");\r",
									"     return (companyName + companyName2).toUpperCase();\r",
									"}\r",
									"\r",
									"function gerUserName() {\r",
									"    const firstName = pm.collectionVariables.get(\"first-name\");\r",
									"    const lastName = pm.collectionVariables.get(\"last-name\");\r",
									"    return (firstName + lastName).toLowerCase();\r",
									"}\r",
									"\r",
									"function gerUserEmail() {\r",
									"    const userName = gerUserName();\r",
									"    return userName + '@mail.com';\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.enabled).to.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyName\": \"{{company-name}}\",\r\n    \"firstName\": \"{{first-name}}\",\r\n    \"lastName\": \"{{last-name}}\",\r\n    \"userName\": \"{{user-name}}\",\r\n    \"email\": \"{{user-email}}\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signup",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tenancy by User email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.id).not.equal(null);\r",
									"\tpm.expect(response.name).not.equal(null);\r",
									"\tpm.expect(response.userLimit).to.equal(1);\r",
									"\tpm.expect(response.userUsage).to.equal(1);\r",
									"\tpm.expect(response.enabled).to.equal(true);\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-id\", response.id);\r",
									"\tpm.collectionVariables.set(\"tenancy-name\", response.name);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/by-email/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"by-email",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set new tenancy Limits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.id).not.equal(null);\r",
									"\tpm.expect(response.name).not.equal(null);\r",
									"\tpm.expect(response.userLimit).to.equal(3);\r",
									"\tpm.expect(response.userUsage).to.equal(1);\r",
									"\tpm.expect(response.enabled).to.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}/limit/3",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}",
								"limit",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(pm.collectionVariables.get(\"user-email\"));\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"REGISTRATION\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"user-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/{{user-email}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"{{user-email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/verify?hash={{user-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"verify"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{user-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"access-token\", response.accessToken);\r",
									"\r",
									"\tpm.collectionVariables.set(\"refresh-token\", response.refreshToken);\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(pm.collectionVariables.get(\"user-name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user-email}}\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create First user for Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.userName).to.eql(\"user1\");\r",
									"\tpm.expect(response.firstName).to.eql(\"user1\");\r",
									"\tpm.expect(response.email).to.eql(\"user1@mail.com\");\r",
									"\tpm.expect(response.lastName).to.eql(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user-1-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"user1\",\r\n    \"lastName\": \"{{tenancy-name}}\",\r\n    \"userName\": \"user1\",\r\n    \"email\": \"user1@mail.com\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/organisation/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Second user for Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.userName).to.eql(\"user2\");\r",
									"\tpm.expect(response.firstName).to.eql(\"user2\");\r",
									"\tpm.expect(response.email).to.eql(\"user2@mail.com\");\r",
									"\tpm.expect(response.lastName).to.eql(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user-2-id\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"user2\",\r\n    \"lastName\": \"{{tenancy-name}}\",\r\n    \"userName\": \"user2\",\r\n    \"email\": \"user2@mail.com\",\r\n    \"password\": \"{{user-password}}\",\r\n    \"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/organisation/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Registration User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(\"user1@mail.com\");\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"NEW_ORGANISATION_USER\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user1-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/user1@mail.com",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"user1@mail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Tenancy User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{authentication-api}}/authentication/verify?hash={{tenancy-user1-verification-hash}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"verify"
							],
							"query": [
								{
									"key": "hash",
									"value": "{{tenancy-user1-verification-hash}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Verification hash for Change Password User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json()[0];\r",
									"\r",
									"    pm.expect(response.email).to.equal(\"user1@mail.com\");\r",
									"\r",
									"\tpm.expect(response.type).to.equal(\"CHANGE_PASSWORD\");\r",
									"\r",
									"\tpm.expect(response.status).to.equal(\"PENDING\");\r",
									"\r",
									"\tpm.expect(response.hash).not.equal(null);\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user1-verification-hash\", response.hash)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/verifications/user1@mail.com",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"verifications",
								"user1@mail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"user1@mail.com\",\r\n\t\"hash\": \"{{tenancy-user1-verification-hash}}\",\r\n\t\"password\": \"{{user-password}}\",\r\n\t\"confirmPassword\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/change-password",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success SignIn As User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"\tpm.expect(response.accessToken).not.equal(null);\r",
									"\r",
									"\tpm.expect(response.refreshToken).not.equal(null);\r",
									"\r",
									"    pm.expect(response.user).to.equal(\"user1\");\r",
									"\r",
									"\tpm.collectionVariables.set(\"tenancy-user1-token\", response.accessToken)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"user1@mail.com\",\r\n  \"password\": \"{{user-password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/authentication/signin",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1 Me Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.userName).to.equal(\"user1\");\r",
									"\tpm.expect(response.firstName).to.equal(\"user1\");\r",
									"\tpm.expect(response.email).to.equal(\"user1@mail.com\");\r",
									"\tpm.expect(response.lastName).to.equal(pm.collectionVariables.get(\"tenancy-name\"));\r",
									"\r",
									"\tpm.expect(response.authorities.length).to.equal(1);\r",
									"\tpm.expect(response.authorities).to.contains(\"ROLE_USER\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tenancy-user1-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/me",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 1 info fail because of user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"  pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.error).to.equal(\"User name already exists for another user\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tenancy-user1-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"userName\": \"user2\",\r\n\t\"firstName\": \"First\",\r\n\t\"lastName\": \"Last\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/me",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 1 info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"\tpm.expect(response.userName).to.equal(\"User1Name\");\r",
									"\tpm.expect(response.firstName).to.equal(\"First\");\r",
									"\tpm.expect(response.email).to.equal(\"user1@mail.com\");\r",
									"\tpm.expect(response.lastName).to.equal(\"Last\");\r",
									"\r",
									"\tpm.expect(response.authorities.length).to.equal(1);\r",
									"\tpm.expect(response.authorities).to.contains(\"ROLE_USER\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tenancy-user1-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"userName\": \"User1Name\",\r\n\t\"firstName\": \"First\",\r\n\t\"lastName\": \"Last\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authentication-api}}/me",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-1-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-1-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/organisation/users/{{tenancy-user-2-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"organisation",
								"users",
								"{{tenancy-user-2-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test response\", () => {\r",
									"    const response = pm.response.json();\r",
									"\tpm.expect(response.totalItems).to.eql(1);\r",
									"\tpm.collectionVariables.set(\"user-id\", response.items[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							},
							{
								"key": "tenancy",
								"value": "{{tenancy-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/users/{{user-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"users",
								"{{user-id}}"
							],
							"query": [
								{
									"key": "filter",
									"value": "Allan",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tenancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-admin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{authentication-api}}/admin/tenancies/{{tenancy-id}}",
							"host": [
								"{{authentication-api}}"
							],
							"path": [
								"admin",
								"tenancies",
								"{{tenancy-id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "access-token-admin",
			"value": ""
		},
		{
			"key": "refresh-token-admin",
			"value": ""
		},
		{
			"key": "company-name",
			"value": ""
		},
		{
			"key": "first-name",
			"value": ""
		},
		{
			"key": "last-name",
			"value": ""
		},
		{
			"key": "user-name",
			"value": ""
		},
		{
			"key": "user-email",
			"value": ""
		},
		{
			"key": "user-verification-hash",
			"value": ""
		},
		{
			"key": "access-token",
			"value": ""
		},
		{
			"key": "refresh-token",
			"value": ""
		},
		{
			"key": "tenancy-id",
			"value": ""
		},
		{
			"key": "tenancy-name",
			"value": ""
		},
		{
			"key": "tenancy-user-1-id",
			"value": ""
		},
		{
			"key": "tenancy-user-2-id",
			"value": ""
		},
		{
			"key": "tenancy-user1-verification-hash",
			"value": ""
		},
		{
			"key": "tenancy-user2-verification-hash",
			"value": ""
		},
		{
			"key": "temp-access-token",
			"value": ""
		},
		{
			"key": "authority-id",
			"value": ""
		},
		{
			"key": "user-id",
			"value": ""
		},
		{
			"key": "tenancy-user1-token",
			"value": ""
		}
	]
}